// Mocks generated by Mockito 5.3.2 from annotations
// in bumblebee/test/core/repositories/firestore_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bumblebee/core/exceptions/failure.dart' as _i5;
import 'package:bumblebee/core/repositories/firestore_repository.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirestoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreRepository extends _i1.Mock
    implements _i3.FirestoreRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>?>> getDocument({
    required String? collectionID,
    required String? documentID,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocument,
          [],
          {
            #collectionID: collectionID,
            #documentID: documentID,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>?>>.value(
                _FakeEither_0<_i5.Failure, Map<String, dynamic>?>(
          this,
          Invocation.method(
            #getDocument,
            [],
            {
              #collectionID: collectionID,
              #documentID: documentID,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>?>>.value(
                _FakeEither_0<_i5.Failure, Map<String, dynamic>?>(
          this,
          Invocation.method(
            #getDocument,
            [],
            {
              #collectionID: collectionID,
              #documentID: documentID,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, Map<String, dynamic>?>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> addDocument({
    required String? collectionID,
    required String? successMessage,
    required Map<String, dynamic>? dataMap,
    String? documentName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDocument,
          [],
          {
            #collectionID: collectionID,
            #successMessage: successMessage,
            #dataMap: dataMap,
            #documentName: documentName,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #addDocument,
            [],
            {
              #collectionID: collectionID,
              #successMessage: successMessage,
              #dataMap: dataMap,
              #documentName: documentName,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #addDocument,
            [],
            {
              #collectionID: collectionID,
              #successMessage: successMessage,
              #dataMap: dataMap,
              #documentName: documentName,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> updateDocument({
    required String? collectionID,
    required String? successMessage,
    required Map<String, dynamic>? dataMap,
    required String? documentName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDocument,
          [],
          {
            #collectionID: collectionID,
            #successMessage: successMessage,
            #dataMap: dataMap,
            #documentName: documentName,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #updateDocument,
            [],
            {
              #collectionID: collectionID,
              #successMessage: successMessage,
              #dataMap: dataMap,
              #documentName: documentName,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #updateDocument,
            [],
            {
              #collectionID: collectionID,
              #successMessage: successMessage,
              #dataMap: dataMap,
              #documentName: documentName,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
